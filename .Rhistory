weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp)
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=B)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp)
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = test_data)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_linear_model) %>%
fit(data=train_data)
lin_preds <- predict(bike_workflow, new_data = bikeTest)
lin_preds <- predict(bike_workflow, new_data = Clean_train)
View(lin_preds)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count))
kaggle_submission <- lin_preds %>%
bind_cols(.,Clean_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count))
kaggle_submission <- lin_preds %>%
bind_cols(.,Clean_train) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count))
kaggle_submission <- lin_preds %>%
bind_cols(.,Clean_train) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
library(tidyverse)
library(tidymodels)
library(vroom)
library(skimr)
library(DataExplorer)
library(patchwork)
setwd("~/GitHub/BikeShare")
Clean_train <- train_data %>%    # Creating new clean data object
select(-casual, -registered) %>% # Selecting everything but casual/registered
mutate(count = log(count)) # Changing count to be the log version of itself
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp)
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = test_data)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_linear_model) %>%
fit(data=train_data)
lin_preds <- predict(bike_workflow, new_data = Clean_train)
kaggle_submission <- lin_preds %>%
bind_cols(.,Clean_train) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp)
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = test_data)
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_linear_model) %>%
fit(data=Clean_train)
lin_preds <- predict(bike_workflow, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,Clean_train) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
my_linear_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_linear_model) %>%
fit(data=Clean_train)
lin_preds <- predict(bike_workflow, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
View(Clean_train)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(myRecipe) %>%
add_model(preg_model) %>%
fit(data = trainingData)
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = trainingData)
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = train_data)
library(glmnet)
install.packages("glmnet")
library(glmnet)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = train_data)
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
predict(preg_wf, new_data = test_data)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_date(all_datetime_predictors(), features = c("year", "month", "dow")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
predict(preg_wf, new_data = test_data)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
predict(preg_wf, new_data = test_data)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
?table
preg_model <- linear_reg(penalty=0, mixture=1) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
preg_model <- linear_reg(penalty=1, mixture=0) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
VP <-c(00,01,10,11,22)
preg_model <- linear_reg(penalty=1, mixture=1) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
preg_model <- linear_reg(penalty=2, mixture=2) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
preg_model <- linear_reg(penalty=2, mixture=2) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
preg_model <- linear_reg(penalty=2, mixture=1) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
VP <-c(00,01,10,11,21)
Score <- c(1.02299, 1.0234, 1.06889, 1.41486,  )
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=.3, mixture=.5) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
my_recipe <- recipe(count ~ season + holiday + workingday +  # Define recipe
weather + temp + atemp + humidity + windspeed +
datetime, data = train_data) %>%
step_mutate(weather = if_else(weather == 4, 3, weather)) %>% # Weather 4 to 3
step_mutate(weather=factor(weather, levels = c(1,2,3))) %>% # Weather to ftr
step_time(datetime, features = c("hour")) %>%
step_mutate(season=factor(season, levels = c(1,2,3,4))) %>% # Season to ftr
step_rm(temp) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_normalize(all_numeric_predictors())
preg_model <- linear_reg(penalty=0, mixture=2) %>%
set_engine("glmnet")
preg_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(preg_model) %>%
fit(data = Clean_train)
lin_preds <- predict(preg_wf, new_data = test_data)
kaggle_submission <- lin_preds %>%
bind_cols(.,test_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = exp(count)) %>%
mutate(count = pmax(0,count)) %>%
mutate(datetime = as.character(format(datetime)))
vroom_write(x = kaggle_submission, file = "./LinearPreds.csv", delim = ",")
table(VP,Score)
VP <-c(00,01,10,11,02)
Score <- c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)
table(VP,Score)
c(VP,Score)
table(Score)
help(table)
data.frame(VP)
data.frame(Combination = VP,
Score = Score)
VP <-c("00","01","10","11","02")
Score <- c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)
t(data.frame(Combination = VP,
Score = Score))
data.frame(Score = Score)
data.frame(Score = Score, colnames = VP)
data.frame(Score = Score) %>%
colnames(x = Vp)
data.frame(Score = Score) %>%
colnames(x = VP)
data.frame(Score)
as.data.frame(Score)
Results %>%
bind_cols(VP, Score)
Results <- bind_cols(VP, Score)
Results <- bind_cols(VP, Score)
Resuts
Results
Results <- bind_cols(VP, Score)
Results <- colnames("VP", "Score")
Results <- bind_cols(data.frame(VP), data.frame(Score))
Results
Results <- c("00","01","10","11","02") %>%
as.data.frame()
Results
help(bind_cols
help(bind_cols)
help(bind_cols)
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042))
Results
is.data.frame(Results)
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
colnames(1,2)
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
colnames(1,2)
Results
is.data.frame(Results)
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
colnames(1,2)
Results
print(Results)
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042))
Results
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
colnames() %>%
c(VP, Score)
Results
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
setNames() %>%
c(VP, Score)
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
setNames() %>%
c("VP", "Score")
Results
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
setNames(c("VP", "Score"))
Results
table(Results)
Results <- tibble(VP <- c("00","01","10","11","02"),
Score <- c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042))
Results
View(Results)
Results <- tibble(VP = c("00","01","10","11","02"),
Score = c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042))
ggplot(data = Results) + geom_point()
Results <- tibble(VP = c("00","01","10","11","02"),
Score = c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042))
ggplot(data = Results) + geom_point()
ggplot(data = Results , aes(x = VP, Y = Score)) + geom_point()
ggplot(data = Results , aes(x = VP, y = Score)) + geom_point()
ggplot(data = Results , aes(x = VP, y = Score)) + geom_point() + geom_line()
ggplot(data = Results , aes(x = VP, y = Score)) + geom_point() + geom_line()
ggplot(data = Results , aes(x = VP, y = Score), group = 1) + geom_point() + geom_line()
Results <- c("00","01","10","11","02") %>%
as.data.frame() %>%
bind_cols(c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042)) %>%
setNames(c("VP", "Score"))
Results <- tibble(VP = c("00","01","10","11","02"),
Score = c(1.02299, 1.0234, 1.06889, 1.41486, 1.07042))
ggplot(data = Results , aes(x = VP, y = Score), group = 1) + geom_point()
